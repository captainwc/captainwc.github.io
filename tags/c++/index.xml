<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on SHUAIKAI&#39;s Blog</title>
    <link>https://kaikaixixi.xyz/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on SHUAIKAI&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 10 Jun 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://kaikaixixi.xyz/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; 高并发服务器模型实现 | [转载](https://github.com/linkxzhou/mylib/blob/master/c%2B%2B/concurrency_server/README.md)</title>
      <link>https://kaikaixixi.xyz/%E8%BD%AC%E8%BD%BD/2025/06/10/22%E7%A7%8Dc-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Tue, 10 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://kaikaixixi.xyz/%E8%BD%AC%E8%BD%BD/2025/06/10/22%E7%A7%8Dc-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;h1 id=&#34;c-高并发服务器模型实现&#34;&gt;C++ 高并发服务器模型实现&lt;/h1&gt;&#xA;&#xA;          &lt;link rel=&#34;stylesheet&#34; href=&#34;https://kaikaixixi.xyz/css/vendors/admonitions.e8f9d71468684b38dcc32a3631441f47b6ee45ce52f3bcc31201e76cc2b0a193.css&#34; integrity=&#34;sha256-6PnXFGhoSzjcwyo2MUQfR7buRc5S87zDEgHnbMKwoZM=&#34; crossorigin=&#34;anonymous&#34;&gt;&#xA;  &lt;div class=&#34;admonition warning&#34;&gt;&#xA;    &lt;div class=&#34;admonition-header&#34;&gt;&#xA;      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 512 512&#34;&gt;&lt;path d=&#34;M256 32c14.2 0 27.3 7.5 34.5 19.8l216 368c7.3 12.4 7.3 27.7 .2 40.1S486.3 480 472 480L40 480c-14.3 0-27.6-7.7-34.7-20.1s-7-27.8 .2-40.1l216-368C228.7 39.5 241.8 32 256 32zm0 128c-13.3 0-24 10.7-24 24l0 112c0 13.3 10.7 24 24 24s24-10.7 24-24l0-112c0-13.3-10.7-24-24-24zm32 224a32 32 0 1 0 -64 0 32 32 0 1 0 64 0z&#34;/&gt;&lt;/svg&gt;&#xA;      &lt;span&gt;声明&lt;/span&gt;&#xA;    &lt;/div&gt;&#xA;      &lt;div class=&#34;admonition-content&#34;&gt;&#xA;        &lt;ul&gt;&#xA;&lt;li&gt;本文由插件&#xA;&lt;a href=&#34;https://chromewebstore.google.com/detail/markdownload-markdown-web/pcmpcfapbekmbjjkdalcgopdkipoggdi?pli=1&#34;  target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; &gt;Markdown Web Clipper&lt;/a&gt;&#xA;自动提取网页正文而来，并未获取原作者授权！&lt;/li&gt;&#xA;&lt;li&gt;本文仅作个人存档学习使用，如有任何疑问/需求请查看&#xA;&lt;a href=&#34;https://github.com/linkxzhou/mylib/blob/master/c%2B%2B/concurrency_server/README.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; &gt;原文&lt;/a&gt;&#xA;！&lt;/li&gt;&#xA;&lt;li&gt;如有侵权，请联系本人立刻删除！&lt;/li&gt;&#xA;&lt;li&gt;原文链接: &#xA;&lt;a href=&#34;https://github.com/linkxzhou/mylib/blob/master/c%2B%2B/concurrency_server/README.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; &gt;C++ 高并发服务器模型实现&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;      &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;本项目实现了多种不同的后端服务器并发模型，展示了各种网络编程和并发处理技术。所有实现都使用 C++11 标准，不依赖第三方库。&lt;/p&gt;</description>
    </item>
    <item>
      <title>libclang-py使用介绍</title>
      <link>https://kaikaixixi.xyz/cpp/libclang-py%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 10 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://kaikaixixi.xyz/cpp/libclang-py%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h1 id=&#34;libclang-python-binding-api介绍&#34;&gt;libclang python binding API介绍&lt;/h1&gt;&#xA;&#xA;          &lt;link rel=&#34;stylesheet&#34; href=&#34;https://kaikaixixi.xyz/css/vendors/admonitions.e8f9d71468684b38dcc32a3631441f47b6ee45ce52f3bcc31201e76cc2b0a193.css&#34; integrity=&#34;sha256-6PnXFGhoSzjcwyo2MUQfR7buRc5S87zDEgHnbMKwoZM=&#34; crossorigin=&#34;anonymous&#34;&gt;&#xA;  &lt;div class=&#34;admonition info&#34;&gt;&#xA;    &lt;div class=&#34;admonition-header&#34;&gt;&#xA;      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 512 512&#34;&gt;&lt;path d=&#34;M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336l24 0 0-64-24 0c-13.3 0-24-10.7-24-24s10.7-24 24-24l48 0c13.3 0 24 10.7 24 24l0 88 8 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-80 0c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z&#34;/&gt;&lt;/svg&gt;&#xA;      &lt;span&gt;Info&lt;/span&gt;&#xA;    &lt;/div&gt;&#xA;      &lt;div class=&#34;admonition-content&#34;&gt;&#xA;        &lt;p&gt;&lt;code&gt;libclang&lt;/code&gt; 是一Clang提供的C接口库，具体介绍参见 &#xA;&lt;a href=&#34;https://clang.llvm.org/doxygen/group__CINDEX.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; &gt;clang: libclang: C Interface to Clang&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;它同时还提供了 python bindings，对有关的C接口进行了封装，方便用python代码来快速操作C/C++源码&lt;/p&gt;</description>
    </item>
    <item>
      <title>参数包与折叠表达式傻傻分不清</title>
      <link>https://kaikaixixi.xyz/cpp/%E5%8F%82%E6%95%B0%E5%8C%85%E4%B8%8E%E6%8A%98%E5%8F%A0%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://kaikaixixi.xyz/cpp/%E5%8F%82%E6%95%B0%E5%8C%85%E4%B8%8E%E6%8A%98%E5%8F%A0%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;参数包与折叠表达式傻傻分不清&#34;&gt;参数包与折叠表达式傻傻分不清&lt;/h1&gt;&#xA;&lt;p&gt;开始接触可变参数的时候，&lt;code&gt;...&lt;/code&gt;的位置总是整得我晕头转向，特别是一下几个例子&lt;/p&gt;&#xA;&#xA;          &lt;link rel=&#34;stylesheet&#34; href=&#34;https://kaikaixixi.xyz/css/vendors/admonitions.e8f9d71468684b38dcc32a3631441f47b6ee45ce52f3bcc31201e76cc2b0a193.css&#34; integrity=&#34;sha256-6PnXFGhoSzjcwyo2MUQfR7buRc5S87zDEgHnbMKwoZM=&#34; crossorigin=&#34;anonymous&#34;&gt;&#xA;  &lt;div class=&#34;admonition bug&#34;&gt;&#xA;    &lt;div class=&#34;admonition-header&#34;&gt;&#xA;      &lt;svg t=&#34;1742460995958&#34; class=&#34;icon&#34; viewBox=&#34;0 0 1024 1024&#34; version=&#34;1.1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; p-id=&#34;30246&#34; width=&#34;200&#34; height=&#34;200&#34;&gt;&lt;path d=&#34;M969.142857 548.571429q0 14.857143-10.857143 25.714286t-25.714286 10.857143l-128 0q0 97.714286-38.285714 165.714286l118.857143 119.428571q10.857143 10.857143 10.857143 25.714286t-10.857143 25.714286q-10.285714 10.857143-25.714286 10.857143t-25.714286-10.857143l-113.142857-112.571429q-2.857143 2.857143-8.571429 7.428571t-24 16.285714-37.142857 20.857143-46.857143 16.571429-55.428571 7.428571l0-512-73.142857 0 0 512q-29.142857 0-58-7.714286t-49.714286-18.857143-37.714286-22.285714-24.857143-18.571429l-8.571429-8-104.571429 118.285714q-11.428571 12-27.428571 12-13.714286 0-24.571429-9.142857-10.857143-10.285714-11.714286-25.428571t8.857143-26.571429l115.428571-129.714286q-33.142857-65.142857-33.142857-156.571429l-128 0q-14.857143 0-25.714286-10.857143t-10.857143-25.714286 10.857143-25.714286 25.714286-10.857143l128 0 0-168-98.857143-98.857143q-10.857143-10.857143-10.857143-25.714286t10.857143-25.714286 25.714286-10.857143 25.714286 10.857143l98.857143 98.857143 482.285714 0 98.857143-98.857143q10.857143-10.857143 25.714286-10.857143t25.714286 10.857143 10.857143 25.714286-10.857143 25.714286l-98.857143 98.857143 0 168 128 0q14.857143 0 25.714286 10.857143t10.857143 25.714286zm-274.285714-329.142857l-365.714286 0q0-76 53.428571-129.428571t129.428571-53.428571 129.428571 53.428571 53.428571 129.428571z&#34; p-id=&#34;30247&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;&#xA;      &lt;span&gt;以下都是错误写法&lt;/span&gt;&#xA;    &lt;/div&gt;&#xA;      &lt;div class=&#34;admonition-content&#34;&gt;&#xA;        &lt;ol&gt;&#xA;&lt;li&gt;不知道可变参数类型怎么声明 &lt;code&gt;template&amp;lt;typename... Args&amp;gt; void foo(Args args...){}&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;不知到参数包、类型包应该怎么传递 &lt;code&gt;std::forward&amp;lt;Args...&amp;gt;(args...)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;折叠表达式和参数包展开傻傻分不清 &lt;code&gt;(std::cout &amp;lt;&amp;lt; &amp;quot;[prefix]&amp;quot; &amp;lt;&amp;lt; Val)...&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;      &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;p&gt;希望看完本文，能够让你明白上面几处错在哪里，正确的写法应该是什么样子的&lt;/p&gt;</description>
    </item>
    <item>
      <title>协程快速入门</title>
      <link>https://kaikaixixi.xyz/cpp/%E5%8D%8F%E7%A8%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate>
      <guid>https://kaikaixixi.xyz/cpp/%E5%8D%8F%E7%A8%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;h1 id=&#34;协程快速上手&#34;&gt;协程快速上手&lt;/h1&gt;&#xA;&lt;h2 id=&#34;什么是协程&#34;&gt;什么是协程？&lt;/h2&gt;&#xA;&lt;p&gt;协程就是一个可以暂停和恢复执行的&lt;strong&gt;函数&lt;/strong&gt;。别的函数是一镜到底，协程是走走停停。停下（被挂起）的时候，就是说当前线程可以去执行别的任务了，完了还能再回来&lt;/p&gt;&#xA;&lt;h2 id=&#34;为什么要有协程&#34;&gt;为什么要有协程&lt;/h2&gt;&#xA;&lt;p&gt;首先看看线程的历史。为什么会有线程呢，线程的作用是什么呢？&lt;/p&gt;&#xA;&lt;p&gt;是为了尽可能多的吃满CPU，发挥性能。当然，这是我们说的多线程并发的常用场景。但是最开始引入线程其实是为了解决一个异步IO的问题。&lt;/p&gt;&#xA;&lt;p&gt;一开始的电脑，程序员编辑完一个文件，按下保存，然后就可以去玩了。因为只有一个线程，在保存的时候，就不能干别的了。但是这显然是不合理的，磁盘在那吭哧吭哧写，但是cpu却是闲着的。闲着的cpu是否应该找点活干呢？&lt;/p&gt;&#xA;&lt;p&gt;后来有了多任务的概念（应该不是当前场景首创，较真的话需要深入考究），也就是多个线程。有了多个线程，保存的线程阻塞了，不影响编辑的线程。这就是多线程带来的异步，让IO进行的时候，CPU能空出来。&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;随着计算机的发展，异步写磁盘的情况已经是小菜一碟了，但是又有了新的挑战，比如经典的C10K问题，也就是服务器单机1w并发请求处理。单个线程处理1w个请求必然会卡死。创建1w个线程，每个线程4M的栈，这就是40G的内存，那显然也不行。看来用线程实现的异步IO不中用了。&lt;/p&gt;&#xA;&lt;p&gt;那是时候引入单线程异步IO的概念了。用一个线程，就可以发起很多个IO操作。这需要：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;一个IO多路复用的通知机制。一个接口，通知所有的IO时间。如果不是多路复用的，那必然就需要新的线程&lt;/li&gt;&#xA;&lt;li&gt;非阻塞IO（只需有IO发起操作，无需等IO完成）。阻塞了当前这个唯一的线程就被挂起了&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;todo: 简化一下&lt;/p&gt;&#xA;&lt;h2 id=&#34;深入理解协程&#34;&gt;深入理解协程&lt;/h2&gt;&#xA;&lt;p&gt;理解协程，最好的办法就是和线程进行类比：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;从调度、挂起切换角度比较&#xA;&lt;ol&gt;&#xA;&lt;li&gt;线程由OS调度、切换，调用阻塞IO等会被挂起，IO就绪OS会将其恢复&lt;/li&gt;&#xA;&lt;li&gt;协程由用户调度、切换，由用户指定什么时候挂起，什么时候恢复。怎么指定呢？——通过&lt;code&gt;Awaiter&lt;/code&gt;指定，&lt;code&gt;await_suspend()&lt;/code&gt;描述协程挂起时执行什么动作（比如发起一次非阻塞IO然后等待，比如注册fd到epoll然后等待）；&lt;code&gt;await_resume()&lt;/code&gt;描述协程恢复时执行什么动作（比如读取就绪数据/向就绪fd发送）。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;从编码角度比较。我们更习惯的都是以同步的方式编码&#xA;&lt;ol&gt;&#xA;&lt;li&gt;线程调用阻塞IO，比如read，发起一次IO，然后当前线程被OS阻塞，IO就绪时恢复。&lt;/li&gt;&#xA;&lt;li&gt;协程效用一个异步IO/非阻塞IO，发起一次任务。然后当前协程被阻塞，任务就绪时恢复。线程阻不阻塞OS知道，协程怎么知道哪个IO要阻塞呢？用&lt;code&gt;co_await&lt;/code&gt;标记。所以加上co_await后，就相当于告诉协程，这是一个“阻塞”IO，要阻塞协程。&lt;/li&gt;&#xA;&lt;li&gt;简单来说，阻塞IO阻塞整个线程，非阻塞IO阻塞协程（用co_await标记上：这对于协程来说是一个阻塞IO）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;从结果传出的角度&#xA;&lt;ol&gt;&#xA;&lt;li&gt;线程需要使用一个&lt;code&gt;std::promise&lt;/code&gt;，传递不是立马能获取到的结果&lt;/li&gt;&#xA;&lt;li&gt;协程也需要这么一个promise，它就是协程的&lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;，里面要求必须有一个&lt;code&gt;promise_type&lt;/code&gt;，这就是协程的promise，用于获取不是立马得到的结果&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;从第2点也可以看出：协程必须要搭配真正的异步IO才叫协程。因为&#xA;&lt;ol&gt;&#xA;&lt;li&gt;调用同步IO，OS管你这那的，直接阻塞整个线程了，它眼里可没有协程这么回事。&lt;/li&gt;&#xA;&lt;li&gt;创建线程实现异步IO，那不还是多线程等于？&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;类比完再想想，什么叫做，&lt;strong&gt;协程时由用户负责调度切换的协程&lt;/strong&gt;这句话，有没有更清晰？&lt;/p&gt;&#xA;&lt;h2 id=&#34;c20协程核心概念&#34;&gt;C++20协程核心概念&lt;/h2&gt;&#xA;&lt;h3 id=&#34;promise_type&#34;&gt;promise_type&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt;typename T&amp;gt;&#xA;struct Task&amp;lt;T&amp;gt;::promise_type {&#xA;    T promised_value;&#xA;    std::exception_ptr exptr;&#xA;    T Get() {&#xA;        if(exptr) std::rethrow_excetion(exptr);&#xA;        return promised_value;&#xA;    }&#xA;    &#xA;    &#xA;    // 强制要求的函数：&#xA;    &#xA;    void get_return_object(){ return Task{std::coroutine_handle&amp;lt;promise_type&amp;gt;::from_promise(*this)}; }&#xA;    &#xA;    auto initial_suspend() { return std::suspend_never{}; }&#xA;    &#xA;    auto final_suspend() noexcept { return std::suspend_always{}; }&#xA;    &#xA;    void unhandled_exception() { exptr = std::current_excetion(); }&#xA;    &#xA;    template&amp;lt;typename U = T&amp;gt;&#xA;    require(std::is_same_v&amp;lt;U, void&amp;gt;)&#xA;    void return_void() {}&#xA;    &#xA;    template&amp;lt;typename U = T&amp;gt;&#xA;    require(std::is_convertible_v&amp;lt;U, T&amp;gt;)&#xA;    void return_value(U v){ promised_value = std::move(v); }&#xA;    &#xA;    template&amp;lt;std::convertible_to&amp;lt;T&amp;gt; From&amp;gt;&#xA;    std::suspend_always yield_value(From v) { promised_value = std::move(v); return {}; }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;那么一个完整的task应该长什么样呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;小技巧</title>
      <link>https://kaikaixixi.xyz/cpp/c&#43;&#43;%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://kaikaixixi.xyz/cpp/c&#43;&#43;%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;h1 id=&#34;c小技巧&#34;&gt;C++小技巧&lt;/h1&gt;&#xA;&#xA;          &lt;link rel=&#34;stylesheet&#34; href=&#34;https://kaikaixixi.xyz/css/vendors/admonitions.e8f9d71468684b38dcc32a3631441f47b6ee45ce52f3bcc31201e76cc2b0a193.css&#34; integrity=&#34;sha256-6PnXFGhoSzjcwyo2MUQfR7buRc5S87zDEgHnbMKwoZM=&#34; crossorigin=&#34;anonymous&#34;&gt;&#xA;  &lt;div class=&#34;admonition reference&#34;&gt;&#xA;    &lt;div class=&#34;admonition-header&#34;&gt;&#xA;      &lt;svg t=&#34;1742461876844&#34; class=&#34;icon&#34; viewBox=&#34;0 0 1024 1024&#34; version=&#34;1.1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; p-id=&#34;48681&#34; width=&#34;200&#34; height=&#34;200&#34;&gt;&lt;path d=&#34;M65.42832 207.541555c1.419105-76.228262 70.647064-144.132337 147.334027-142.150095 199.191771-0.610236 398.376374-0.255971 597.569168-0.203753-0.258019 198.478122 0.308189 397.006415-0.307166 595.484538-185.424608-0.308189-370.898363 0.099317-556.379285-0.203753-41.290223-0.610236-82.376694 23.058921-101.272498 60.082614-17.062025 30.879358-16.402643 69.986657-0.863135 101.371815 17.472603 36.771818 56.783656 61.19865 97.310061 62.116051 211.991361-0.104436 423.930504 0.05017 635.917769-0.050171 0.100341-223.46502-0.054266-446.880893 0.050171-670.345913 24.783144-0.05017 49.617483 0 74.405746 0 0.149487 248.402771 0.05017 496.855712 0.050171 745.30763-247.084007 0-494.21716 0.05017-741.303214-0.049147-58.405491 0.504775-115.542387-34.743501-139.458301-88.32342-10.871614-23.112163-13.718016-48.908954-13.152831-74.147727 0.149487-196.296223-0.054266-392.592446 0.099317-588.888669z&#34; p-id=&#34;48682&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M288.89334 735.53362c173.850609-0.049146 347.639784-0.153583 521.438175 0.050171-0.099317 24.481098 0.05017 49.011343-0.099317 73.542611-173.749244-0.05017-347.488249 0.049146-521.239541 0-0.19761-24.580415-0.148463-49.061513-0.099317-73.592782z&#34; p-id=&#34;48683&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;&#xA;      &lt;span&gt;Reference&lt;/span&gt;&#xA;    &lt;/div&gt;&#xA;      &lt;div class=&#34;admonition-content&#34;&gt;&#xA;        &lt;p&gt;&#xA;&lt;a href=&#34;https://142857.red/book/cpp_tricks&#34;  target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; &gt;小彭老师的C++大典&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;      &lt;/div&gt;&#xA;  &lt;/div&gt;</description>
    </item>
    <item>
      <title>现代C&#43;&#43;开发环境配置指南</title>
      <link>https://kaikaixixi.xyz/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/c&#43;&#43;%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://kaikaixixi.xyz/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/c&#43;&#43;%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;h1 id=&#34;现代c环境配置指南&#34;&gt;现代c++环境配置指南&lt;/h1&gt;&#xA;&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;作为一个高强度冲浪的cpper，经常能在各种地方看到各式各样的大家诟病cpp的地方，其中比较多（但是相对温和）的一条就是，环境配置麻烦。这个问题有多少人说呢？最直观的一条佐证是，迄今为止，我的阅读、点赞、收藏量最多的一篇博文，居然就是随手写的一篇很粗糙的 —— &#xA;&lt;a href=&#34;https://blog.csdn.net/qq_43533638/article/details/137198166&#34;  target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; &gt;vscode搭配clangd配置现代c++环境-CSDN博客&lt;/a&gt;&#xA;，这背后又有多少被这编程第一关折磨的旁友&amp;hellip;&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;本人的CPP水平一言难尽，平常喜欢的就是精通各类语言的hello world，以及配置各种有的没的环境，那么闲话少叙，下面就对这个粗糙的环境配置的坑进行补档。&lt;/p&gt;&#xA;&#xA;          &lt;link rel=&#34;stylesheet&#34; href=&#34;https://kaikaixixi.xyz/css/vendors/admonitions.e8f9d71468684b38dcc32a3631441f47b6ee45ce52f3bcc31201e76cc2b0a193.css&#34; integrity=&#34;sha256-6PnXFGhoSzjcwyo2MUQfR7buRc5S87zDEgHnbMKwoZM=&#34; crossorigin=&#34;anonymous&#34;&gt;&#xA;  &lt;div class=&#34;admonition goal&#34;&gt;&#xA;    &lt;div class=&#34;admonition-header&#34;&gt;&#xA;      &lt;svg t=&#34;1742460196923&#34; class=&#34;icon&#34; viewBox=&#34;0 0 1024 1024&#34; version=&#34;1.1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; p-id=&#34;14835&#34; width=&#34;200&#34; height=&#34;200&#34;&gt;&lt;path d=&#34;M872.768 151.232h-0.064l107.264 21.44c5.76 1.152 10.496 5.376 12.16 11.072a16 16 0 0 1-3.968 15.936l-87.872 87.936a56.064 56.064 0 0 1-39.616 16.384H787.84L604.8 487.104A96 96 0 1 1 416 512a96.064 96.064 0 0 1 120.896-92.736l183.104-183.168V163.328c0-14.848 5.888-29.12 16.384-39.616L824.32 35.776a16 16 0 0 1 15.936-3.968c5.696 1.664 9.92 6.4 11.072 12.16z&#34; p-id=&#34;14836&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M128 512a384 384 0 1 0 753.216-105.984 48.064 48.064 0 1 1 92.288-26.432 480.128 480.128 0 0 1-800.832 471.744A480.064 480.064 0 0 1 644.416 50.496a48 48 0 0 1-26.432 92.288A384.064 384.064 0 0 0 128 512z&#34; p-id=&#34;14837&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M320 512a192.128 192.128 0 0 0 300.736 158.464 192 192 0 0 0 81.92-180.928 47.872 47.872 0 0 1 66.88-50.048 48 48 0 0 1 28.48 39.04A288 288 0 1 1 545.024 225.92a48 48 0 1 1-10.88 95.36A192 192 0 0 0 320 512z&#34; p-id=&#34;14838&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;&#xA;      &lt;span&gt;Goal&lt;/span&gt;&#xA;    &lt;/div&gt;&#xA;      &lt;div class=&#34;admonition-content&#34;&gt;&#xA;        &lt;ol&gt;&#xA;&lt;li&gt;所谓CPP环境，具体指的是什么？&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高亮、跳转、补全、错误提示、依赖管理、构建、调试、运行、发布&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;具体开发环境搭建&#xA;&lt;ul&gt;&#xA;&lt;li&gt;vscode、vim/nvim、sublime，or clion、vs&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;      &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&#xA;  &lt;div class=&#34;admonition message&#34;&gt;&#xA;    &lt;div class=&#34;admonition-header&#34;&gt;&#xA;      &lt;svg t=&#34;1742462024302&#34; class=&#34;icon&#34; viewBox=&#34;0 0 1024 1024&#34; version=&#34;1.1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; p-id=&#34;54058&#34; width=&#34;200&#34; height=&#34;200&#34;&gt;&lt;path d=&#34;M352.29696 481.72544m-52.31104 0a52.31104 52.31104 0 1 0 104.62208 0 52.31104 52.31104 0 1 0-104.62208 0Z&#34; p-id=&#34;54059&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M513.51552 429.4144c-28.88704 0-52.31104 23.424-52.31104 52.31104 0 28.89216 23.424 52.31616 52.31104 52.31616 28.928 0 52.34688-23.424 52.34688-52.31616 0-28.88704-23.41888-52.31104-52.34688-52.31104z&#34; p-id=&#34;54060&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M512 0C229.23776 0 0 229.23776 0 512s229.23776 512 512 512 512-229.23776 512-512S794.76224 0 512 0z m282.99264 642.70336c0 32.18944-28.26752 60.3648-64.37888 60.3648H356.3264L231.56224 763.4432V300.6208c0-32.18944 28.18048-60.36992 64.39424-60.36992h434.65728c36.1984 0 64.37888 28.18048 64.37888 60.36992v342.08256z&#34; p-id=&#34;54061&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M674.72384 429.4144c-28.88704 0-52.31104 23.424-52.31104 52.31104 0 28.89216 23.424 52.31616 52.31104 52.31616 28.8512 0 52.35712-23.424 52.35712-52.31616 0-28.88704-23.424-52.31104-52.35712-52.31104z&#34; p-id=&#34;54062&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;&#xA;      &lt;span&gt;提示&lt;/span&gt;&#xA;    &lt;/div&gt;&#xA;      &lt;div class=&#34;admonition-content&#34;&gt;&#xA;        &lt;p&gt;本文会对我所认知范围内的，C++的环境做全流程的介绍。也会介绍具体的工具、环境该如何配置，但囿于篇幅和本人的水平以及耐心，可能不会特别详细，更无法兼顾到所有的conner case。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CyberRT中的代码和工程技巧</title>
      <link>https://kaikaixixi.xyz/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/cyberrt/cyberrt%E4%B8%AD%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%92%8C%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sat, 01 Mar 2025 18:08:37 +0000</pubDate>
      <guid>https://kaikaixixi.xyz/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/cyberrt/cyberrt%E4%B8%AD%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%92%8C%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;h1 id=&#34;cyberrt-中的代码和工程技巧&#34;&gt;CyberRT 中的代码和工程技巧&lt;/h1&gt;&#xA;&lt;h2 id=&#34;c规范&#34;&gt;C++规范&lt;/h2&gt;&#xA;&#xA;          &lt;link rel=&#34;stylesheet&#34; href=&#34;https://kaikaixixi.xyz/css/vendors/admonitions.e8f9d71468684b38dcc32a3631441f47b6ee45ce52f3bcc31201e76cc2b0a193.css&#34; integrity=&#34;sha256-6PnXFGhoSzjcwyo2MUQfR7buRc5S87zDEgHnbMKwoZM=&#34; crossorigin=&#34;anonymous&#34;&gt;&#xA;  &lt;div class=&#34;admonition tip&#34;&gt;&#xA;    &lt;div class=&#34;admonition-header&#34;&gt;&#xA;      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 384 512&#34;&gt;&lt;path d=&#34;M272 384c9.6-31.9 29.5-59.1 49.2-86.2c0 0 0 0 0 0c5.2-7.1 10.4-14.2 15.4-21.4c19.8-28.5 31.4-63 31.4-100.3C368 78.8 289.2 0 192 0S16 78.8 16 176c0 37.3 11.6 71.9 31.4 100.3c5 7.2 10.2 14.3 15.4 21.4c0 0 0 0 0 0c19.8 27.1 39.7 54.4 49.2 86.2l160 0zM192 512c44.2 0 80-35.8 80-80l0-16-160 0 0 16c0 44.2 35.8 80 80 80zM112 176c0 8.8-7.2 16-16 16s-16-7.2-16-16c0-61.9 50.1-112 112-112c8.8 0 16 7.2 16 16s-7.2 16-16 16c-44.2 0-80 35.8-80 80z&#34;/&gt;&lt;/svg&gt;&#xA;      &lt;span&gt;Tip&lt;/span&gt;&#xA;    &lt;/div&gt;&#xA;      &lt;div class=&#34;admonition-content&#34;&gt;&#xA;        &lt;p&gt;C++设计类时总有一些不确定的写法，这里列举出 CyberRT 中的一些设计，作为参考&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
